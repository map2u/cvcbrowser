<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser {

    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $useruploadfiles;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $categories;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $maplayers;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Constructor
     */
    public function __construct() {
        parent::__construct();
        $this->groups = new \Doctrine\Common\Collections\ArrayCollection();
        $this->stations = new \Doctrine\Common\Collections\ArrayCollection();
        $this->useruploadfiles = new \Doctrine\Common\Collections\ArrayCollection();
        $this->categories = new \Doctrine\Common\Collections\ArrayCollection();
        $this->maplayers = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * @var \Yorku\JuturnaBundle\Entity\MemberShip
     */
    private $membership;

    /**
     * Set membership
     *
     * @param \Yorku\JuturnaBundle\Entity\MemberShip $membership
     * @return User
     */
    public function setMembership(\Yorku\JuturnaBundle\Entity\MemberShip $membership = null) {
        $this->membership = $membership;

        return $this;
    }

    /**
     * Get membership
     *
     * @return \Yorku\JuturnaBundle\Entity\MemberShip 
     */
    public function getMembership() {
        return $this->membership;
    }

    /**
     * Add useruploadfiles
     *
     * @param \Map2u\CoreBundle\Entity\UserUploadfile $useruploadfiles
     * @return User
     */
    public function addUseruploadfile(\Map2u\CoreBundle\Entity\UserUploadfile $useruploadfiles) {
        $this->useruploadfiles[] = $useruploadfiles;

        return $this;
    }

    /**
     * Remove useruploadfiles
     *
     * @param \Map2u\CoreBundle\Entity\UserUploadfile $useruploadfiles
     */
    public function removeUseruploadfile(\Map2u\CoreBundle\Entity\UserUploadfile $useruploadfiles) {
        $this->useruploadfiles->removeElement($useruploadfiles);
    }

    /**
     * Get useruploadfiles
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getUseruploadfiles() {
        return $this->useruploadfiles;
    }

    /**
     * Add category
     *
     * @param \Map2u\CoreBundle\Model\CategoryInterface $category
     * @return User
     */
    public function addCategory(\Map2u\CoreBundle\Model\CategoryInterface $category) {
        $this->categories[] = $category;

        return $this;
    }

    /**
     * Remove category
     *
     * @param \Map2u\CoreBundle\Model\CategoryInterface $category
     */
    public function removeCategory(\Map2u\CoreBundle\Model\CategoryInterface $category) {
        $this->categories->removeElement($category);
    }

    /**
     * Get categories
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCategories() {
        return $this->categories;
    }

    /**
     * Add maplayer
     *
     * @param \Map2u\CoreBundle\Model\MapLayerInterface $maplayer
     * @return User
     */
    public function addMapLayer(\Map2u\CoreBundle\Model\MapLayerInterface $maplayer) {
        $this->maplayers[] = $maplayer;

        return $this;
    }

    /**
     * Remove maplayer
     *
     * @param \Map2u\CoreBundle\Model\MapLayerInterface $maplayer
     */
    public function removeMapLayer(\Map2u\CoreBundle\Model\MapLayerInterface $maplayer) {
        $this->maplayers->removeElement($maplayer);
    }

    /**
     * Get maplayers
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getMapLayers() {
        return $this->maplayers;
    }

}
