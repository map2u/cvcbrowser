<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser {

    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $spatialfiles;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $categories;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $symbolizedLayers;

    /**
     * @var \Map2u\CoreBundle\Entity\UserGroup
     */
    private $usergroups;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Constructor
     */
    public function __construct() {
        parent::__construct();
        //   $this->groups = new \Doctrine\Common\Collections\ArrayCollection();
        $this->stations = new \Doctrine\Common\Collections\ArrayCollection();
        $this->usergroups = new \Doctrine\Common\Collections\ArrayCollection();
        $this->spatialfiles = new \Doctrine\Common\Collections\ArrayCollection();
        $this->categories = new \Doctrine\Common\Collections\ArrayCollection();
        $this->symbolizedLayers = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * @var \Yorku\JuturnaBundle\Entity\MemberShip
     */
    private $membership;

    /**
     * Set membership
     *
     * @param \Yorku\JuturnaBundle\Entity\MemberShip $membership
     * @return User
     */
    public function setMembership(\Yorku\JuturnaBundle\Entity\MemberShip $membership = null) {
        $this->membership = $membership;

        return $this;
    }

    /**
     * Get membership
     *
     * @return \Yorku\JuturnaBundle\Entity\MemberShip 
     */
    public function getMembership() {
        return $this->membership;
    }

    /**
     * Add spatialfiles
     *
     * @param \Map2u\CoreBundle\Entity\SpatialFile $spatialfiles
     * @return User
     */
    public function addSpatialFile(\Map2u\CoreBundle\Entity\SpatialFile $spatialfiles) {
        $this->spatialfiles[] = $spatialfiles;

        return $this;
    }

    /**
     * Remove spatialfiles
     *
     * @param \Map2u\CoreBundle\Entity\SpatialFile $spatialfiles
     */
    public function removeSpatialFile(\Map2u\CoreBundle\Entity\SpatialFile $spatialfiles) {
        $this->spatialfiles->removeElement($spatialfiles);
    }

    /**
     * Get spatialfiles
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getSpatialFiles() {
        return $this->spatialfiles;
    }

    /**
     * Add category
     *
     * @param \Map2u\CoreBundle\Model\CategoryInterface $category
     * @return User
     */
    public function addCategory(\Map2u\CoreBundle\Model\CategoryInterface $category) {
        $this->categories[] = $category;

        return $this;
    }

    /**
     * Remove category
     *
     * @param \Map2u\CoreBundle\Model\CategoryInterface $category
     */
    public function removeCategory(\Map2u\CoreBundle\Model\CategoryInterface $category) {
        $this->categories->removeElement($category);
    }

    /**
     * Get categories
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCategories() {
        return $this->categories;
    }

    /**
     * Add symbolizedLayer
     *
     * @param \Map2u\CoreBundle\Model\SymbolizedLayerInterface $symbolizedLayer
     * @return User
     */
    public function addSymbolizedLayer(\Map2u\CoreBundle\Model\SymbolizedLayerInterface $symbolizedLayer) {
        $this->symbolizedLayers[] = $symbolizedLayer;

        return $this;
    }

    /**
     * Remove symbolizedLayer
     *
     * @param \Map2u\CoreBundle\Model\SymbolizedLayerInterface $symbolizedLayer
     */
    public function removeSymbolizedLayer(\Map2u\CoreBundle\Model\SymbolizedLayerInterface $symbolizedLayer) {
        $this->symbolizedLayers->removeElement($symbolizedLayer);
    }

    /**
     * Get symbolizedLayers
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getSymbolizedLayers() {
        return $this->symbolizedLayers;
    }

    /**
     * @var \Map2u\CoreBundle\Entity\UserGroup
     */

    /**
     * Get usergroups
     *
     * @return \Map2u\CoreBundle\Entity\UserGroup
     */
    public function getUsergroups() {
        return $this->usergroups;
    }

    /**
     * add usergroups
     *
     * @param \Map2u\CoreBundle\Entity\UserGroup $usergroups
     * @return User
     */
    public function addUsergroup($usergroups) {
        $this->usergroups[] = $usergroups;
        return $this;
    }

    /**
     * remove usergroups
     *
     * @param \Map2u\CoreBundle\Entity\UserGroup $usergroups
     * @return User
     */
    public function removeUsergroup($usergroups) {
        $this->usergroups->remove($usergroups);
        return $this;
    }

}
